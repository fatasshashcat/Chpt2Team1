breed    [ agents an-agent ]
breed [ cops cop ]


globals [
  k                   ; factor for determining arrest probability
  threshold           ; by how much must G > N to make someone rebel?
]

agents-own [
  risk-aversion       ; R, fixed for the agent's lifetime, ranging from 0-1 (inclusive)
  perceived-hardship  ; H, also ranging from 0-1 (inclusive)
  state
  jail-term           ; how many turns in jail remain? (if 0, the agent is not in jail)
]

patches-own [
  neighborhood        ; surrounding patches within the vision radius
]

to setup
  clear-all

  ; set globals
  set k 2.3
  set threshold 0.1

  ask patches [
    ; make background a slightly dark gray
    set pcolor gray - 1
    ; cache patch neighborhoods
    set neighborhood patches in-radius vision
  ]

  if initial-cop-density + initial-agent-density > 100 [
    user-message (word
      "The sum of INITIAL-COP-DENSITY and INITIAL-AGENT-DENSITY "
      "should not be greater than 100.")
    stop
  ]

  ; create cops
  create-cops round (initial-cop-density * .01 * count patches) [
    move-to one-of patches with [ not any? turtles-here ]
    display-cop
  ]

  ; create agents
  create-agents round (initial-agent-density * .01 * count patches) [
    move-to one-of patches with [ not any? turtles-here ]
    set heading 0
    set risk-aversion random-float 1.0
    set perceived-hardship random-float 1.0
    set state "not-active"
    set jail-term 0
    display-agent
  ]

  ; start clock and plot initial state of system
  reset-ticks
end

to go
  ask turtles [
    if breed = agents [
      update-beliefs
      if jail-term > 0 [
        set jail-term jail-term - 1
        ;print "jail-term - 1"
      ]
    ]
    if breed = agents and jail-term = 0 [ state-machine ]
    if breed = cops [ enforce ]
    if (breed = agents and jail-term = 0) or breed = cops [ move ]
  ]

  ask agents [ display-agent ]
  ask cops [ display-cop ]
  tick
end


; AGENT AND COP BEHAVIOR

to move
  if movement?[
    if breed = agents [
      if (state = "not-active" and jail-term = 0) [
        move-to one-of patches with [not any? turtles-here]
        ;print "move agents"
      ]
    ]
  ]
  if breed = cops[
    let targets neighborhood with [not any? cops-here and all? agents-here [ jail-term > 0 ]]
    if any? targets [ move-to one-of targets ]
    ;print "move cops"
  ]
end


to update-beliefs
  ; "updating beliefs..."
  set risk-aversion random-float 1.0
  set perceived-hardship random-float 1.0
end


to state-machine
  if ((grievance - risk-aversion * estimated-arrest-probability) > threshold) [
    set state "active"
    ;print "agent set active"
  ]
  if jail-term > 0 [
    set state "not-active"
    ;print "agent set not-active"
  ]
end


to-report grievance
  report perceived-hardship * (1 - government-legitimacy)
end

to-report estimated-arrest-probability
  let c count cops-on neighborhood
  let a 1 + count (agents-on neighborhood) with [ state = "active" ]
  ; See Info tab for a discussion of the following formula
  report 1 - exp (- k * floor (c / a))
end

; COP BEHAVIOR

to enforce
  if any? (agents-on neighborhood) with [ state = "active" ] [
    ;print "At least one active agent found in the neighborhood."
    ; arrest suspect
    let suspect one-of (agents-on neighborhood) with [ state = "active" ]
    move-to suspect ; move to patch of the jailed agent
    ask suspect [
      set jail-term random max-jail-term
      ;print "someone got to jail"
    ]
  ]
end

; VISUALIZATION OF AGENTS AND COPS

to display-agent  ; agent procedure
  ifelse visualization = "2D"
    [ display-agent-2d ]
  [ display-agent-3d ]
end

to display-agent-2d  ; agent procedure
  set shape "circle"
  ifelse state = "active"
    [ set color red ]
  [ ifelse jail-term > 0
    [ set color black + 3 ]
    [ set color scale-color green grievance 1.5 -0.5 ] ]
end

to display-agent-3d ; agent procedure
  set color scale-color green grievance 1.5 -0.5
  ifelse state = "active"
  [ set shape "person active" ]
  [ ifelse jail-term > 0
    [ set shape "person jailed" ]
    [ set shape "person quiet" ] ]
end

to display-cop
  set color cyan
  ifelse visualization = "2D"
    [ set shape "triangle" ]
  [ set shape "person soldier" ]
end